input {
  file {
    path => "/usr/share/logstash/ingest_data/mock_data.csv"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    mode => "tail"
  }
}

filter {
  csv {
    separator => ","
    columns => ["insertdate", "source", "tablename", "nb_lines_collected", "nb_lines_filtered", "nb_lines_enriched", "nb_lines_ingested_hive", "nb_events_hive"]
  }

  # Convertir les valeurs en nombres
  mutate {
    convert => {
      "nb_lines_collected" => "integer"
      "nb_lines_filtered" => "integer"
      "nb_lines_enriched" => "integer"
      "nb_lines_ingested_hive" => "integer"
      "nb_events_hive" => "integer"
    }
  }

  # Calcul du taux de complétude
  ruby {
    code => "event.set('completeness_rate', (event.get('nb_lines_ingested_hive').to_f / event.get('nb_lines_collected').to_f) * 100)"
  }

  # Calcul du taux d'anomalie de structure
  ruby {
    code => "event.set('structure_anomaly_rate', (event.get('nb_lines_collected').to_f - event.get('nb_lines_filtered').to_f) / event.get('nb_lines_collected').to_f * 100)"
  }

  # Calcul du taux de transformation
  ruby {
    code => "event.set('transformation_error_rate', ((event.get('nb_lines_collected').to_f - event.get('nb_lines_enriched').to_f) / event.get('nb_lines_collected').to_f) * 100)"
  }

  # Calcul du taux de doublons - à ajuster en fonction des données réelles
  # Cette section peut nécessiter des scripts supplémentaires pour détecter les doublons
  ruby {
    code => "event.set('duplicate_rate', rand(1..5))"  # Exemple de simulation entre 1 % et 5 %
  }

  # Délai de disponibilité des données - nécessite un champ de timestamp d'insertion et de disponibilité
  ruby {
    code => "
      if event.get('availability_timestamp') && event.get('insertdate')
        diff = (event.get('availability_timestamp').to_i - event.get('insertdate').to_i) / 60
        event.set('data_availability_delay', diff)
      end
    "
  }
}

output {
  elasticsearch {
    hosts => "https://es01:9200"
    index => "data_quality_kpi"
    user => "${ELASTIC_USER}"
    password => "${ELASTIC_PASSWORD}"
    ssl => true
    ssl_certificate_verification => false
  }
  stdout { codec => rubydebug }
}
 